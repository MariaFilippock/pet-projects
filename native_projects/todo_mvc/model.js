import{ROWS_PER_PAGE,LOCAL_STORAGE_APP_STATE_KEY,FILTER_TYPE}from"./const.js";export class Model{constructor(){this.state=JSON.parse(localStorage.getItem(LOCAL_STORAGE_APP_STATE_KEY))||{tasks:[],currentPage:1,filter:FILTER_TYPE.all}}setCurrentPage(t){this.setState({...this.state,currentPage:t})}setFilter(t){this.setState({...this.state,currentPage:1,filter:t})}setTasks(t){this.setState({...this.state,tasks:t})}setState(t){this.state=t,this.saveToLocalStorage()}getPageCount(){const t=this.filterTaskList(this.state).length;return Math.ceil(t/ROWS_PER_PAGE)}addTask(t){if(!t)return;const e={id:Date.now(),text:t,completed:!1,isFavorite:!1};this.setTasks([...this.state.tasks,e])}checkUpdateCurrentPage(){const t=this.getPageCount();t<this.state.currentPage&&this.setCurrentPage(t)}deleteTask(t){const e=this.state.tasks.filter(e=>e.id!==t);this.setTasks(e),this.checkUpdateCurrentPage()}completeTask(t){const e=this.state.tasks.map(e=>e.id===t?{...e,completed:!e.completed}:e);this.setTasks(e),this.checkUpdateCurrentPage()}addToFavoriteTask(t){const e=this.state.tasks.map(e=>e.id===t?{...e,isFavorite:!e.isFavorite}:e);this.setTasks(e),this.checkUpdateCurrentPage()}filterTaskList(t){let e=[];return t.filter===FILTER_TYPE.all&&(e=t.tasks),t.filter===FILTER_TYPE.favorite&&(e=t.tasks.filter(t=>t.isFavorite)),t.filter===FILTER_TYPE.complete&&(e=t.tasks.filter(t=>t.completed)),e}getTasksForCurrentPage(t){const e=(t.currentPage-1)*ROWS_PER_PAGE,s=e+ROWS_PER_PAGE;return this.filterTaskList(t).slice(e,s)}saveToLocalStorage(){localStorage.setItem(LOCAL_STORAGE_APP_STATE_KEY,JSON.stringify(this.state))}}